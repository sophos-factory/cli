name: Publish packages

on:
  workflow_call:
  workflow_dispatch:

jobs:
  generate_tags:
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.set-tags.outputs.result }}
    steps:
      - uses: actions/checkout@v2
      - run: git fetch --prune --unshallow --tags
      - uses: actions/github-script@v3
        id: set-tags
        with:
          script: |
            const { exec } = require('child_process');
            exec(`git describe --tags --abbrev=0`, (err, tag, stderr) => {
              if (err) {
                console.log('Could not get latest tag:', stderr);
                process.exit(1)
              }
            });
            const version = tag.trim()
            const tags = [version];
            if (!['alpha', 'beta', 'rc'].some((suffix) => version.includes(suffix))) {
              const parts = version.split('.');
              for (let i = 1; i < parts.length; i++) {
                tags.push(parts.slice(0, i).join('.'));
              }
              tags.push('latest');
            }
            console.info('Produced tags: ', tags);
            return tags;

  publish_docker:
    name: Publish to Docker Hub
    needs:
      - generate_tags
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 12.x
      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - uses: actions/cache@v2
        id: npm-cache
        if: ${{ steps.npm-cache.outputs.cache-hit != 'true' }}
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - uses: actions/github-script@v3
        id: get-tags
        with:
          result-encoding: string
          script: |
            const tags = ${{ needs.generate_tags.outputs.tags }};
            const dockerTags = tags.map((tag) => `refactr/cli:${tag}`);
            console.log(
              'Decoded tags: ', tags,
              '\n',
              'Docker tags: ', dockerTags
            );
            return dockerTags;
      - run: npm install
      - run: npm run build:aot
      - run: npm run build:exe:alpine

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.get-tags.outputs.result }}

  publish_packages:
    name: Publish packages to npm and GPR
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: '12.x'
          registry-url: 'https://registry.npmjs.org/'
          scope: '@refactr'
      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - uses: actions/cache@v2
        id: npm-cache
        if: ${{ steps.npm-cache.outputs.cache-hit != 'true' }}
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - run: npm install
      - run: npm run build:runtime

      - name: Publish to npm registry
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Publish to GPR
        uses: actions/setup-node@v2
        with:
          registry-url: 'https://npm.pkg.github.com'
          scope: '@refactr'
      - run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Create GitHub Release and upload binary assets
  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    permissions: write-all
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  # Publish macOS and Linux x64 build
  create_binary:
    name: Create executable for ${{ matrix.operating-system }}
    needs: create_release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        operating-system: [linux, macos, win]
    steps:
      - uses: actions/checkout@v2
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 12.x

      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - uses: actions/cache@v2
        id: npm-cache
        if: ${{ steps.npm-cache.outputs.cache-hit != 'true' }}
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - run: npm install
      - run: npm run build:aot
      - run: npm run build:exe:${{ matrix.operating-system }}

      # Windows
      - if: ${{ matrix.operating-system == 'win' }}
        run: zip --junk-paths refactr-${{ matrix.operating-system }}-x64.zip dist/${{ matrix.operating-system }}/refactrctl.exe ./LICENSE

      # macOS, Linux
      - if: ${{ matrix.operating-system != 'win' }}
        run: zip --junk-paths refactr-${{ matrix.operating-system }}-x64.zip dist/${{ matrix.operating-system }}/refactrctl ./LICENSE

      - run: sha256sum ./refactr-${{ matrix.operating-system }}-x64.zip -b | awk '{ print $1 }' >> ./refactr-${{ matrix.operating-system }}-x64-sha256sum.txt

      - name: Upload Release Asset (${{ matrix.operating-system }})
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./refactr-${{ matrix.operating-system }}-x64.zip
          asset_name: refactr-${{ matrix.operating-system }}-x64.zip
          asset_content_type: application/zip
      - name: Upload SHA256 Sum (${{ matrix.operating-system }})
        id: upload-sha
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./refactr-${{ matrix.operating-system }}-x64-sha256sum.txt
          asset_name: refactr-${{ matrix.operating-system }}-x64-sha256sum.txt
          asset_content_type: plain/text
