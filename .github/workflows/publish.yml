name: Publish executables

on:
  push:
    tags:
      - 'v*'

jobs:
  generate_tags:
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.set-tags.outputs.result }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/github-script@v3
        id: set-tags
        with:
          script: |
            const version = `${process.env.GITHUB_REF}`.replace('refs/tags/v', '');
            const tags = [version];

            if (!['alpha', 'beta', 'rc'].some((suffix) => version.includes(suffix))) {
              const parts = version.split('.');
              for (let i = 1; i < parts.length; i++) {
                tags.push(parts.slice(0, i).join('.'));
              }

              tags.push('latest');
            }

            console.info('Produced tags: ', tags);

            return tags;

  test:
    name: Test
    runs-on: ${{ matrix.operating-system }}
    strategy:
      matrix:
        operating-system: [ubuntu-latest, macos-latest]
        node-version: [12.x, 14.x, 15.x]
    steps:
      - uses: actions/checkout@v2
      - name: Setup node ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - run: node -e "console.log('FACTORY_CLI_PATH'+'='+path.resolve('./bin/refactrctl.js'))" >> $GITHUB_ENV

      - run: yarn install
      - run: yarn build:runtime

      - run: yarn lint
      - run: yarn test:unit
      - run: yarn test:e2e
        env:
          FACTORY_ADDRESS: ${{ secrets.FACTORY_ADDRESS }}
          FACTORY_STATIC_AUTH_TOKEN: ${{ secrets.FACTORY_AUTH_TOKEN }}
          FACTORY_DYNAMIC_AUTH_TOKEN: ${{ secrets.FACTORY_AUTH_TOKEN2 }}

  deploy_docker:
    name: Deploy to Docker Hub
    needs:
      - test
      - generate_tags
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 12.x

      - id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - uses: actions/github-script@v3
        id: get-tags
        with:
          result-encoding: string
          script: |
            const tags = ${{ needs.generate_tags.outputs.tags }};
            const dockerTags = tags.map((tag) => `refactr/cli:${tag}`);

            console.log(
              'Decoded tags: ', tags,
              '\n',
              'Docker tags: ', dockerTags
            );

            return dockerTags;


      - run: yarn install
      - run: yarn build:aot
      - run: yarn build:exe:alpine

      # Docker
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.get-tags.outputs.result }}

  deploy_npm:
    name: Deploy to npm
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 12.x
          registry-url: https://registry.npmjs.org/

      - id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - run: yarn install
      - run: yarn build:runtime

      - name: Publish to npm registry
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # GitHub Release
  create_gh_release:
    name: Create release
    needs: test
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  # Publish macOS and Linux x64 build
  deploy_binary:
    name: Deploy executables ${{ matrix.operating-system }}

    needs: create_gh_release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # TODO: add win
        operating-system: [linux, macos]
    steps:
      - uses: actions/checkout@v2
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 12.x

      - id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - run: yarn install
      - run: yarn build:aot
      - run: yarn build:exe:${{ matrix.operating-system }}

      # Windows
      - if: ${{ matrix.operating-system == 'win' }}
        run: zip --junk-paths refactr-${{ matrix.operating-system }}-x64.zip dist/${{ matrix.operating-system }}/refactrctl.exe ./LICENSE

      # macOS, Linux
      - if: ${{ matrix.operating-system != 'win' }}
        run: zip --junk-paths refactr-${{ matrix.operating-system }}-x64.zip dist/${{ matrix.operating-system }}/refactrctl ./LICENSE

      - run: sha256sum ./refactr-${{ matrix.operating-system }}-x64.zip -b | awk '{ print $1 }' >> ./refactr-${{ matrix.operating-system }}-x64-sha256sum.txt

      - name: Upload Release Asset (${{ matrix.operating-system }})
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_gh_release.outputs.upload_url }}
          asset_path: ./refactr-${{ matrix.operating-system }}-x64.zip
          asset_name: refactr-${{ matrix.operating-system }}-x64.zip
          asset_content_type: application/zip

#      - name: Upload SHA256 Sum (${{ matrix.operating-system }})
#        id: upload-release-asset
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ needs.create_gh_release.outputs.upload_url }}
#          asset_path: ./refactr-${{ matrix.operating-system }}-x64-sha256sum.txt
#          asset_name: refactr-${{ matrix.operating-system }}-x64-sha256sum.txt
#          asset_content_type: plain/text
