name: Publish to Docker Hub

on:
  workflow_call:
  workflow_dispatch:

jobs:
  publish_docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: git fetch --prune --unshallow --tags
      - name: Get version from Git tags
        id: get-version
        run: |
          echo "::set-output name=version::$(git describe --abbrev=0)"
      - uses: actions/github-script@v5
        env:
          VER: ${{ steps.get-version.outputs.version }}
        id: generate_tags
        with:
          script: |
            const VER = process.env;
            const tags = [`${VER}`];
            if (!['alpha', 'beta', 'rc'].some((suffix) => version.includes(suffix))) {
              const parts = version.split('.');
              for (let i = 1; i < parts.length; i++) {
                tags.push(parts.slice(0, i).join('.'));
              }
              tags.push('latest');
            }
            console.info('Produced tags: ', tags);
            return tags;
          result-encoding: string

      - uses: actions/checkout@v2
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 12.x
      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"
      - uses: actions/cache@v2
        id: npm-cache
        if: ${{ steps.npm-cache.outputs.cache-hit != 'true' }}
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - uses: actions/github-script@v5
        id: get-tags
        env:
          TAGS: ${{ steps.generate_tags.outputs.result }}
        with:
          result-encoding: string
          script: |
            const tags = `${TAGS}`;
            const dockerTags = tags.map((tag) => `refactr/cli:${tag}`);
            console.log(
              'Decoded tags: ', tags,
              '\n',
              'Docker tags: ', dockerTags
            );
            return dockerTags;
      - run: npm install
      - run: npm run build:aot
      - run: npm run build:exe:alpine

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.generate_tags.outputs.result }}
